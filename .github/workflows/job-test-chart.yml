name: Test Helm Chart
on:
  workflow_call:
    inputs:
      branch:
        description: 'branch to checkout'
        required: false
        default: ''
        type: string
      chartRepos:
        required: false
        type: string
        default: ''
      chartsFolder:
        required: false
        type: string
        default: 'charts'
      chartName:
        required: true
        type: string
      additionalTestFilesCommand:
        required: false
        type: string
        default: '-f chart/test-values.yaml'

jobs:
  unittest:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/openmfp/gha/infra/helm-unittest:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.github_token }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
      - name: Unit Testing Chart
        run: helm unittest ${{ inputs.chartsFolder }}/${{ inputs.chartName }}
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Helm
        uses: azure/setup-helm@v4.2.0
        with:
          version: v3.14.4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          check-latest: true
      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.6.1
      - name: Log in to ghcr.io
        run: |
          echo "${GITHUB_TOKEN}" | helm registry login ghcr.io --username "${GITHUB_ACTOR}" --password-stdin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
      - name: Run chart-testing (list-changed)
        id: list-changed
        run: |
          changed=$(ct list-changed --target-branch ${{ github.event.repository.default_branch }} --chart-dirs=${{ inputs.chartsFolder }})
          if [[ -n "$changed" ]]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi
      - name: Run chart-testing (lint)
        if: steps.list-changed.outputs.changed == 'true'
        run: ct lint --target-branch ${{ github.event.repository.default_branch }} --chart-dirs=${{ inputs.chartsFolder }} --validate-maintainers=false --chart-repos=${{ inputs.chartRepos }}





      # This prepares directory where github/codeql-action/upload-sarif@v1 looks up report files by default.
      - name: Create ../results directory for SARIF report files
        shell: bash
        run: mkdir -p ../results
      - name: Scan yaml files with kube-linter
        uses: stackrox/kube-linter-action@v1.0.5
        id: kube-linter-action-scan
        with:
          # Adjust this directory to the location where your kubernetes resources and helm charts are located.
#          directory: ./target/chart/
          directory: ${{ inputs.chartsFolder }}
          # Adjust this to the location of kube-linter config you're using, or remove the setting if you'd like to use
          # the default config.
          # Example config file:	https://github.com/stackrox/kube-linter-action/blob/main/sample/.kube-linter-config.yml
          # KubeLinter includes the following built-in checks:  https://github.com/stackrox/kube-linter/blob/main/docs/generated/checks.md
          #config: sample/.kube-linter-config.yaml
          # The following two settings make kube-linter produce scan analysis in SARIF format which would then be
          # made available in GitHub UI via upload-sarif action below.
          format: sarif
          output-file: ../results/kube-linter.sarif
        # The following line prevents aborting the workflow immediately in case your files fail kube-linter checks.
        # This allows the following upload-sarif action to still upload the results to your GitHub repo.
        continue-on-error: true

      - name: Upload SARIF report files to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          # Path to SARIF file relative to the root of the repository
          sarif_file: ../results/kube-linter.sarif

      # Ensure the workflow eventually fails if files did not pass kube-linter checks.
      - name: Verify kube-linter-action succeeded
        shell: bash
        run: |
          echo "If this step fails, kube-linter found issues. Check the output of the scan step above."
          [[ "${{ steps.kube-linter-action-scan.outcome }}" == "success" ]]

      - name: kube-score check
        uses: piraces/kube-score-ga@v0.1.3
        with:
          manifests-folders: ${{ inputs.chartsFolder }}