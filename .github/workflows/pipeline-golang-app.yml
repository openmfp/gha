name: pipeline
on:
  workflow_call:
    inputs:
      imageTagName:
        required: true
        type: string
      useTask:
        required: false
        type: boolean
        default: false
      coverageThreasholdFile:
        required: false
        type: number
        default: 80
      coverageThresholdPackage:
        required: false
        type: number
        default: 80
      coverageThreasholdTotal:
        required: false
        type: number
        default: 95
      useLocalCoverageConfig:
        required: false
        type: boolean
        default: false
      release_branch:
        required: false
        type: string
        default: 'main'
      repoVersionUpdate:
        required: false
        type: string
        default: 'openmfp/helm-charts-priv'
      doubleTagging:
        required: false
        type: boolean
        default: false
    outputs:
      version:
        description: "The created Version"
        value: ${{ jobs.createVersion.outputs.version }}
  workflow_dispatch:
    inputs:
      imageTagName:
        required: true
        type: string
      useTask:
        required: false
        type: boolean
        default: false
      coverageThreasholdFile:
        required: false
        type: number
        default: 80
      coverageThresholdPackage:
        required: false
        type: number
        default: 80
      coverageThreasholdTotal:
        required: false
        type: number
        default: 95
      useLocalCoverageConfig:
        required: false
        type: boolean
        default: false
      release_branch:
        required: false
        type: string
        default: 'main'
      repoVersionUpdate:
        required: false
        type: string
        default: 'openmfp/helm-charts-priv'

jobs:
  auto-labeler:
    if: ${{ github.ref != format('refs/heads/{0}',inputs.release_branch) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run auto-labeler
        id: auto-labeler
        uses: mauroalderete/action-assign-labels@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          conventional-commits: |
            conventional-commits:
              - type: 'fix'
                nouns: ['FIX', 'Fix', 'fix', 'FIXED', 'Fixed', 'fixed']
                labels: ['fix']
              - type: 'feature'
                nouns: ['FEATURE', 'Feature', 'feature', 'FEAT', 'Feat', 'feat']
                labels: ['feature']
              - type: 'breaking_change'
                nouns: ['BREAKING CHANGE', 'BREAKING', 'MAJOR']
                labels: ['BREAKING CHANGE']
              - type: 'documentation'
                nouns: ['doc', 'docs', 'docu','document','documentation']
                labels: ['documentation','fix']
              - type: 'build'
                nouns: ['build','rebuild']
                labels: ['build','fix']
              - type: 'dependencies'
                nouns: ['build(deps)','build(deps-dev)']
                labels: ['build','dependencies','fix']
              - type: 'config'
                nouns: ['config', 'conf', 'configuration', 'configure']
                labels: ['config','fix']
              - type: 'chore'
                nouns: ['chore']
                labels: ['chore','fix']

  createVersion:
    uses: ./.github/workflows/job-create-version.yml
    secrets: inherit
  
  lint:
    uses: ./.github/workflows/job-golang-lint.yml
    with:
      useTask: ${{ inputs.useTask }}

  testSource:
    uses: ./.github/workflows/job-golang-test-source.yml
    with:
      useTask: ${{ inputs.useTask }}
      useLocalCoverageConfig: ${{ inputs.useLocalCoverageConfig }}
      coverageThreasholdFile: ${{ inputs.coverageThreasholdFile }}
      coverageThresholdPackage: ${{ inputs.coverageThresholdPackage }}
      coverageThreasholdTotal: ${{ inputs.coverageThreasholdTotal }}

  dockerBuildAndPush:
    needs: [createVersion,lint,testSource]
    uses: ./.github/workflows/job-docker-build-push.yml
    with:
      imageTagName: ${{ inputs.imageTagName }}
      version: ${{ needs.createVersion.outputs.version }}
      release_branch: ${{ inputs.release_branch }}
      multiarch: true
    secrets: inherit

  updateVersion:
    needs: [createVersion, dockerBuildAndPush]
    if: ${{ github.ref == format('refs/heads/{0}',inputs.release_branch) }}
    uses: ./.github/workflows/job-chart-version-update.yml
    secrets: inherit
    with:
      appVersion: ${{ needs.createVersion.outputs.version }}
      chart: ${{ github.event.repository.name }}
      targetRepository: ${{ inputs.repoVersionUpdate }}

  pushPrefixedGHTag:
    runs-on: ubuntu-latest
    needs: [createVersion]
    if: ${{ (github.ref == format('refs/heads/{0}',inputs.release_branch)) && inputs.doubleTagging == true }}
    steps:
      - name: Create second tag
        id: create-second-tag
        run: |
          echo "Creating second tag"
          result="${{ needs.createVersion.outputs.version }}"
          if [[ $result == v* ]]; then
            result="${result:1}"
          else
            result="v$result"
          fi
          echo "secondtag_string=$result" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Publish Prefixed GH Tag
        id: push-prefixed-gh-tag
        uses: thejeff77/action-push-tag@v1.0.0
        with:
          tag: ${{ env.secondtag_string }}
          message: '${{ env.secondtag_string }}'
